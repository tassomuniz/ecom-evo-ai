version: "3.8"

services:
  api:
    image: evo-ai-api:latest
    build: .
    container_name: evo-ai-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    networks:
      - evo-network

  postgres:
    image: postgres:14-alpine
    container_name: evo-ai-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: evo_ai
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - evo-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  redis:
    image: redis:alpine
    container_name: evo-ai-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped
    networks:
      - evo-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 500M

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME:-evo-ai-postgres-data}
  redis_data:
    name: ${REDIS_VOLUME_NAME:-evo-ai-redis-data}

networks:
  evo-network:
    name: ${NETWORK_NAME:-evo-network}
    driver: bridge
